<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="hdispatch.core.dispatch.mapper.ExecutionJobsMapper" >
  <resultMap id="BaseResultMap" type="hdispatch.core.dispatch.dto.ExecutionJobs" >
    <id column="attempt" property="attempt" jdbcType="INTEGER" />
    <id column="exec_id" property="exec_id" jdbcType="INTEGER" />
    <id column="job_id" property="job_id" jdbcType="VARCHAR" />
    <result column="project_id" property="project_id" jdbcType="INTEGER" />
    <result column="version" property="version" jdbcType="INTEGER" />
    <result column="flow_id" property="flow_id" jdbcType="VARCHAR" />
    <result column="lang" property="lang" jdbcType="VARCHAR" />
    <result column="meaning" property="meaning" jdbcType="VARCHAR" />
    <result column="start_time" property="start_time" jdbcType="BIGINT" />
    <result column="end_time" property="end_time" jdbcType="BIGINT" />
    <result column="status" property="status" jdbcType="TINYINT" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="hdispatch.core.dispatch.dto.ExecutionJobsWithBLOBs" extends="BaseResultMap" >
    <result column="input_params" property="input_params" jdbcType="LONGVARBINARY" />
    <result column="output_params" property="output_params" jdbcType="LONGVARBINARY" />
    <result column="attachments" property="attachments" jdbcType="LONGVARBINARY" />
  </resultMap>
  <sql id="Base_Column_List" >
    attempt, exec_id, job_id, project_id, version, flow_id, start_time, end_time, status
  </sql>
  <sql id="Blob_Column_List" >
    input_params, output_params, attachments
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="hdispatch.core.dispatch.dto.ExecutionJobsKey" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from execution_jobs
    where attempt = #{attempt,jdbcType=INTEGER}
      and exec_id = #{exec_id,jdbcType=INTEGER}
      and job_id = #{job_id,jdbcType=VARCHAR}
      
  </select>
    <select id="selectJobsByFlow" resultMap="ResultMapWithBLOBs" parameterType="hdispatch.core.dispatch.dto.ExecutionJobs" >
    select 
    attempt, exec_id, job_id, project_id, version, flow_id, start_time, end_time, status
    ,
    scvb.meaning as meaning
    ,
    <include refid="Blob_Column_List" />
    from execution_jobs,sys_code_b scb,sys_code_value_b scvb,sys_code_value_tl scv
    where attempt = 0
    and scb.CODE_ID = scvb.CODE_ID
	and execution_jobs.status=scvb.value
	and scvb.CODE_VALUE_ID = scv.CODE_VALUE_ID
	and scb.CODE = 'HDISPATCH.JOB_STATUS'
	and SCV.LANG = #{lang,jdbcType=VARCHAR}
      and exec_id = #{exec_id,jdbcType=INTEGER}
      and flow_id = #{flow_id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="hdispatch.core.dispatch.dto.ExecutionJobsKey" >
    delete from execution_jobs
    where attempt = #{attempt,jdbcType=INTEGER}
      and exec_id = #{exec_id,jdbcType=INTEGER}
      and job_id = #{job_id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="hdispatch.core.dispatch.dto.ExecutionJobsWithBLOBs" >
    insert into execution_jobs (attempt, exec_id, job_id, 
      project_id, version, flow_id, 
      start_time, end_time, status, 
      input_params, output_params, 
      attachments)
    values (#{attempt,jdbcType=INTEGER}, #{exec_id,jdbcType=INTEGER}, #{job_id,jdbcType=VARCHAR}, 
      #{project_id,jdbcType=INTEGER}, #{version,jdbcType=INTEGER}, #{flow_id,jdbcType=VARCHAR}, 
      #{start_time,jdbcType=BIGINT}, #{end_time,jdbcType=BIGINT}, #{status,jdbcType=TINYINT}, 
      #{input_params,jdbcType=LONGVARBINARY}, #{output_params,jdbcType=LONGVARBINARY}, 
      #{attachments,jdbcType=LONGVARBINARY})
  </insert>
  <insert id="insertSelective" parameterType="hdispatch.core.dispatch.dto.ExecutionJobsWithBLOBs" >
    insert into execution_jobs
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="attempt != null" >
        attempt,
      </if>
      <if test="exec_id != null" >
        exec_id,
      </if>
      <if test="job_id != null" >
        job_id,
      </if>
      <if test="project_id != null" >
        project_id,
      </if>
      <if test="version != null" >
        version,
      </if>
      <if test="flow_id != null" >
        flow_id,
      </if>
      <if test="start_time != null" >
        start_time,
      </if>
      <if test="end_time != null" >
        end_time,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="input_params != null" >
        input_params,
      </if>
      <if test="output_params != null" >
        output_params,
      </if>
      <if test="attachments != null" >
        attachments,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="attempt != null" >
        #{attempt,jdbcType=INTEGER},
      </if>
      <if test="exec_id != null" >
        #{exec_id,jdbcType=INTEGER},
      </if>
      <if test="job_id != null" >
        #{job_id,jdbcType=VARCHAR},
      </if>
      <if test="project_id != null" >
        #{project_id,jdbcType=INTEGER},
      </if>
      <if test="version != null" >
        #{version,jdbcType=INTEGER},
      </if>
      <if test="flow_id != null" >
        #{flow_id,jdbcType=VARCHAR},
      </if>
      <if test="start_time != null" >
        #{start_time,jdbcType=BIGINT},
      </if>
      <if test="end_time != null" >
        #{end_time,jdbcType=BIGINT},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="input_params != null" >
        #{input_params,jdbcType=LONGVARBINARY},
      </if>
      <if test="output_params != null" >
        #{output_params,jdbcType=LONGVARBINARY},
      </if>
      <if test="attachments != null" >
        #{attachments,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="hdispatch.core.dispatch.dto.ExecutionJobsWithBLOBs" >
    update execution_jobs
    <set >
      <if test="project_id != null" >
        project_id = #{project_id,jdbcType=INTEGER},
      </if>
      <if test="version != null" >
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="flow_id != null" >
        flow_id = #{flow_id,jdbcType=VARCHAR},
      </if>
      <if test="start_time != null" >
        start_time = #{start_time,jdbcType=BIGINT},
      </if>
      <if test="end_time != null" >
        end_time = #{end_time,jdbcType=BIGINT},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="input_params != null" >
        input_params = #{input_params,jdbcType=LONGVARBINARY},
      </if>
      <if test="output_params != null" >
        output_params = #{output_params,jdbcType=LONGVARBINARY},
      </if>
      <if test="attachments != null" >
        attachments = #{attachments,jdbcType=LONGVARBINARY},
      </if>
    </set>
    where attempt = #{attempt,jdbcType=INTEGER}
      and exec_id = #{exec_id,jdbcType=INTEGER}
      and job_id = #{job_id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="hdispatch.core.dispatch.dto.ExecutionJobsWithBLOBs" >
    update execution_jobs
    set project_id = #{project_id,jdbcType=INTEGER},
      version = #{version,jdbcType=INTEGER},
      flow_id = #{flow_id,jdbcType=VARCHAR},
      start_time = #{start_time,jdbcType=BIGINT},
      end_time = #{end_time,jdbcType=BIGINT},
      status = #{status,jdbcType=TINYINT},
      input_params = #{input_params,jdbcType=LONGVARBINARY},
      output_params = #{output_params,jdbcType=LONGVARBINARY},
      attachments = #{attachments,jdbcType=LONGVARBINARY}
    where attempt = #{attempt,jdbcType=INTEGER}
      and exec_id = #{exec_id,jdbcType=INTEGER}
      and job_id = #{job_id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="hdispatch.core.dispatch.dto.ExecutionJobs" >
    update execution_jobs
    set project_id = #{project_id,jdbcType=INTEGER},
      version = #{version,jdbcType=INTEGER},
      flow_id = #{flow_id,jdbcType=VARCHAR},
      start_time = #{start_time,jdbcType=BIGINT},
      end_time = #{end_time,jdbcType=BIGINT},
      status = #{status,jdbcType=TINYINT}
    where attempt = #{attempt,jdbcType=INTEGER}
      and exec_id = #{exec_id,jdbcType=INTEGER}
      and job_id = #{job_id,jdbcType=VARCHAR}
  </update>
</mapper>